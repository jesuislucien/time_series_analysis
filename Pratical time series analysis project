{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "77067ca8",
   "metadata": {},
   "source": [
    "<h1>Importing relevant Libraries here</h1>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ddb04e78",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import datetime as dt\n",
    "import matplotlib.pyplot as plt\n",
    "# !pip install pandas_datareader\n",
    "from pandas_datareader import data, wb\n",
    "from scipy import stats"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0b42ea0a",
   "metadata": {},
   "source": [
    "<h1>0. Data Selection</h1>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b62b524c",
   "metadata": {},
   "source": [
    "For this work, we'll be using the <b>Goldman Sachs Physical Gold ETF (AAAU)</b> which is traded in USD as the gold ETF. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "97aca113",
   "metadata": {},
   "source": [
    "Our choice for equity ETF is the <b>iShares VII Public Limited Company - iShares Nikkei</b> which is traded in GBp in LSE (London Stock Exchange )"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dd6597dd",
   "metadata": {},
   "source": [
    "The source of the dataset is <a href='https://finance.yahoo.com'>Yahoo Finane</a>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e11cc6b8",
   "metadata": {},
   "source": [
    "<h1>1. Data Importing</h1>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "580d4882",
   "metadata": {},
   "outputs": [],
   "source": [
    "#writing a helper function which takes in the ticker and returns the oct and nov data set\n",
    "\n",
    "def get_oct_and_nov_data(ticker, database='yahoo'):\n",
    "    start_oct = dt.datetime(2019,10,1)\n",
    "    end_oct = dt.datetime(2019,10,31)\n",
    "    start_nov = dt.datetime(2019,11,1)\n",
    "    end_nov = dt.datetime(2019,11,30)\n",
    "\n",
    "    oct_data = data.DataReader(ticker, database, start_oct,end_oct)\n",
    "    nov_data = data.DataReader(ticker, database, start_nov,end_nov)\n",
    "#     print(oct_data.head(2))\n",
    "#     print(oct_data.tail(2))\n",
    "#     print(nov_data.head(2))\n",
    "#     print(nov_data.tail(2))\n",
    "    return oct_data, nov_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "7721fda3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Getting the Gold ETF (AAAU) dataset\n"
     ]
    }
   ],
   "source": [
    "print(\"Getting the Gold ETF (AAAU) dataset\")\n",
    "gold_etf_oct_data, gold_etf_nov_data = get_oct_and_nov_data(\"AAAU\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f802eef1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Getting the Equity ETF (CNKY.L) dataset\n"
     ]
    }
   ],
   "source": [
    "print(\"Getting the Equity ETF (CNKY.L) dataset\")\n",
    "equity_etf_oct_data, equity_etf_nov_data = get_oct_and_nov_data(\"CNKY.L\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "57820467",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "n year treasury yield i.e. n data \n",
      "year 30\n",
      "year 10\n",
      "year 7\n",
      "year 5\n",
      "year 3\n",
      "year 2\n",
      "            DGS2  DGS3  DGS5  DGS7  DGS10  DGS30\n",
      "DATE                                            \n",
      "2019-10-01  1.56  1.51  1.51  1.59   1.65   2.11\n",
      "2019-10-02  1.48  1.43  1.43  1.53   1.60   2.09\n",
      "2019-10-03  1.39  1.34  1.34  1.45   1.54   2.04\n",
      "2019-10-04  1.40  1.35  1.34  1.43   1.52   2.01\n",
      "2019-10-07  1.46  1.41  1.38  1.47   1.56   2.05\n",
      "2019-10-08  1.42  1.38  1.36  1.45   1.54   2.04\n",
      "2019-10-09  1.47  1.43  1.40  1.50   1.59   2.08\n",
      "2019-10-10  1.53  1.49  1.48  1.57   1.67   2.16\n",
      "2019-10-11  1.63  1.60  1.59  1.68   1.76   2.22\n",
      "2019-10-14   NaN   NaN   NaN   NaN    NaN    NaN\n",
      "2019-10-15  1.61  1.60  1.59  1.68   1.77   2.23\n",
      "2019-10-16  1.58  1.57  1.57  1.65   1.75   2.23\n",
      "2019-10-17  1.60  1.57  1.57  1.66   1.76   2.24\n",
      "2019-10-18  1.58  1.56  1.56  1.66   1.76   2.25\n",
      "2019-10-21  1.62  1.59  1.61  1.70   1.80   2.28\n",
      "2019-10-22  1.60  1.59  1.60  1.68   1.78   2.26\n",
      "2019-10-23  1.58  1.58  1.58  1.67   1.77   2.25\n",
      "2019-10-24  1.58  1.58  1.58  1.67   1.77   2.26\n",
      "2019-10-25  1.63  1.62  1.62  1.71   1.80   2.29\n",
      "2019-10-28  1.64  1.65  1.66  1.75   1.85   2.34\n",
      "2019-10-29  1.64  1.65  1.66  1.74   1.84   2.33\n",
      "2019-10-30  1.61  1.60  1.61  1.69   1.78   2.26\n",
      "2019-10-31  1.52  1.52  1.51  1.60   1.69   2.17\n",
      "            DGS2  DGS3  DGS5  DGS7  DGS10  DGS30\n",
      "DATE                                            \n",
      "2019-11-01  1.56  1.55  1.55  1.63   1.73   2.21\n",
      "2019-11-04  1.60  1.59  1.60  1.69   1.79   2.27\n",
      "2019-11-05  1.63  1.63  1.66  1.77   1.86   2.34\n",
      "2019-11-06  1.61  1.60  1.63  1.73   1.81   2.30\n",
      "2019-11-07  1.68  1.70  1.74  1.84   1.92   2.40\n",
      "2019-11-08  1.68  1.70  1.74  1.86   1.94   2.43\n",
      "2019-11-11   NaN   NaN   NaN   NaN    NaN    NaN\n",
      "2019-11-12  1.66  1.69  1.73  1.84   1.92   2.39\n",
      "2019-11-13  1.63  1.65  1.69  1.79   1.88   2.36\n",
      "2019-11-14  1.58  1.59  1.63  1.73   1.82   2.31\n",
      "2019-11-15  1.61  1.61  1.65  1.75   1.84   2.31\n",
      "2019-11-18  1.60  1.59  1.63  1.73   1.81   2.30\n",
      "2019-11-19  1.60  1.59  1.63  1.71   1.79   2.26\n",
      "2019-11-20  1.56  1.55  1.58  1.66   1.73   2.20\n",
      "2019-11-21  1.60  1.59  1.62  1.71   1.77   2.24\n",
      "2019-11-22  1.61  1.60  1.62  1.71   1.77   2.22\n",
      "2019-11-25  1.61  1.60  1.62  1.71   1.76   2.21\n",
      "2019-11-26  1.58  1.58  1.58  1.68   1.74   2.18\n",
      "2019-11-27  1.63  1.61  1.63  1.71   1.77   2.19\n",
      "2019-11-28   NaN   NaN   NaN   NaN    NaN    NaN\n",
      "2019-11-29  1.61  1.61  1.62  1.73   1.78   2.21\n"
     ]
    }
   ],
   "source": [
    "print(\"n year treasury yield i.e. n data \")\n",
    "n=[2,3,5,7,10,30]\n",
    "\n",
    "treasury_data_oct = pd.DataFrame()\n",
    "treasury_data_nov = pd.DataFrame()\n",
    "\n",
    "for year in n[::-1]:\n",
    "    print(\"year\", year)\n",
    "    treasy_yield_yr_oct_data, treasy_yield_yr_nov_data = get_oct_and_nov_data(\"DGS\"+str(year),'fred')\n",
    "    \n",
    "    if(not(treasury_data_oct.empty)):\n",
    "        treasury_data_oct = pd.merge(treasy_yield_yr_oct_data, treasury_data_oct, how=\"outer\",on=\"DATE\")\n",
    "        treasury_data_nov = pd.merge(treasy_yield_yr_nov_data, treasury_data_nov, how=\"outer\",on=\"DATE\")\n",
    "\n",
    "    else:\n",
    "        treasury_data_oct = treasy_yield_yr_oct_data\n",
    "        treasury_data_nov = treasy_yield_yr_nov_data\n",
    "        \n",
    "print(treasury_data_oct)\n",
    "print(treasury_data_nov)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "93eb9f87",
   "metadata": {},
   "source": [
    "<h1>2. Data Processing</h1>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "e49947d1",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Cleaning the treasury yield data\n",
    "treasury_data_oct = treasury_data_oct.dropna() #Dropping NaN values\n",
    "treasury_data_nov = treasury_data_nov.dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "2cab17f8",
   "metadata": {},
   "outputs": [],
   "source": [
    "#This functions takes a stock data df as input and computes the returns\n",
    "def calculate_daily_returns(df):\n",
    "    df['Daily_Return'] = np.log(df['Adj Close']/df['Adj Close'].shift(1))\n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "4e92e3da",
   "metadata": {},
   "outputs": [],
   "source": [
    "equity_etf_oct_data=calculate_daily_returns(equity_etf_oct_data)\n",
    "equity_etf_nov_data=calculate_daily_returns(equity_etf_nov_data)\n",
    "gold_etf_oct_data=calculate_daily_returns(gold_etf_oct_data)\n",
    "gold_etf_nov_data=calculate_daily_returns(gold_etf_nov_data)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6438e6af",
   "metadata": {},
   "source": [
    "<h1>3. Data Summaries</h1>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d41548e7",
   "metadata": {},
   "source": [
    "# 3.1-3 Calculating average yield of benchmark securities, gold ETF and equity ETF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "cd975714",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "######################################################################\n",
      "Averages for the benchMarks\n",
      "The averages for October are : DGS2     1.551364\n",
      "DGS3     1.528182\n",
      "DGS5     1.525000\n",
      "DGS7     1.615000\n",
      "DGS10    1.706818\n",
      "DGS30    2.190455\n",
      "dtype: float64\n",
      "The averages for November are : DGS2     1.612632\n",
      "DGS3     1.612105\n",
      "DGS5     1.639474\n",
      "DGS7     1.735789\n",
      "DGS10    1.812105\n",
      "DGS30    2.280526\n",
      "dtype: float64\n",
      "######################################################################\n",
      "Averages for the gold ETF\n",
      "The average for October is: 14.916087026181428\n",
      "The average for November is: 14.676000022888184\n",
      "######################################################################\n",
      "Averages for the Equity ETF\n",
      "The average for October is : 15384.58695652174\n",
      "The average for November is : 15715.5\n"
     ]
    }
   ],
   "source": [
    "print(\"#\"*70)\n",
    "print(\"Averages for the benchMarks\")\n",
    "print(\"The averages for October are : {}\".format(np.mean(treasury_data_oct)))\n",
    "print(\"The averages for November are : {}\".format(np.mean(treasury_data_nov)))\n",
    "\n",
    "print(\"#\"*70)\n",
    "print(\"Averages for the gold ETF\")\n",
    "print(\"The average for October is: {}\".format(np.mean(gold_etf_oct_data['Adj Close'])))\n",
    "print(\"The average for November is: {}\".format(np.mean(gold_etf_nov_data['Adj Close'])))\n",
    "\n",
    "print(\"#\"*70)\n",
    "print(\"Averages for the Equity ETF\")\n",
    "print(\"The average for October is : {}\".format(np.mean(equity_etf_oct_data['Adj Close'])))\n",
    "print(\"The average for November is : {}\".format(np.mean(equity_etf_nov_data['Adj Close'])))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ed9587b6",
   "metadata": {},
   "source": [
    "# 3.3-5 Calculating standard deviation of benchmark securities, gold ETF and equity ETF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "e32ee9a3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "######################################################################\n",
      "Calculating the standard deviations of the benchMark securities\n",
      "The standard deviations for the month of October are: DGS2     0.078468\n",
      "DGS3     0.094226\n",
      "DGS5     0.102058\n",
      "DGS7     0.098338\n",
      "DGS10    0.102398\n",
      "DGS30    0.098971\n",
      "dtype: float64\n",
      "The standard deviations for the month of November are : DGS2     0.032902\n",
      "DGS3     0.042868\n",
      "DGS5     0.051347\n",
      "DGS7     0.059411\n",
      "DGS10    0.063294\n",
      "DGS30    0.074866\n",
      "dtype: float64\n",
      "######################################################################\n",
      "Standard deviations for the gold ETF\n",
      "The standard deviation for October is : 0.08869776968009653\n",
      "The standard deviation for November is : 0.15897793656373374\n",
      "######################################################################\n",
      "Standard deviations for the equity ETF\n",
      "The standard deviation for October is : 110.29433468973048\n",
      "The standard deviation for November is : 102.59014618976862\n"
     ]
    }
   ],
   "source": [
    "print(\"#\"*70)\n",
    "print(\"Calculating the standard deviations of the benchMark securities\")\n",
    "print(\"The standard deviations for the month of October are: {}\".format(np.std(treasury_data_oct)))\n",
    "print(\"The standard deviations for the month of November are : {}\".format(np.std(treasury_data_nov)))\n",
    "\n",
    "print(\"#\"*70)\n",
    "print(\"Standard deviations for the gold ETF\")\n",
    "print(\"The standard deviation for October is : {}\".format(np.std(gold_etf_oct_data['Adj Close'])))\n",
    "print(\"The standard deviation for November is : {}\".format(np.std(gold_etf_nov_data['Adj Close'])))\n",
    "\n",
    "print(\"#\"*70)\n",
    "print(\"Standard deviations for the equity ETF\")\n",
    "print(\"The standard deviation for October is : {}\".format(np.std(equity_etf_oct_data['Adj Close'])))\n",
    "print(\"The standard deviation for November is : {}\".format(np.std(equity_etf_nov_data['Adj Close'])))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c8ffeae5",
   "metadata": {},
   "source": [
    "<h1>4. Graphing</h1>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1cf043ac",
   "metadata": {},
   "source": [
    "<h3>4.1 Graphing the 6 benchmark securities for the 2 months on 1 plot</h3>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "7f09165e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Yield')"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "treasury_data=pd.concat([treasury_data_oct,treasury_data_nov])\n",
    "plot=treasury_data.plot(figsize=(10, 6))\n",
    "plot.set_xlabel(\"Date\")\n",
    "plot.set_ylabel(\"Yield\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "987cd9bb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DGS2</th>\n",
       "      <th>DGS3</th>\n",
       "      <th>DGS5</th>\n",
       "      <th>DGS7</th>\n",
       "      <th>DGS10</th>\n",
       "      <th>DGS30</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DATE</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2019-10-01</th>\n",
       "      <td>1.56</td>\n",
       "      <td>1.51</td>\n",
       "      <td>1.51</td>\n",
       "      <td>1.59</td>\n",
       "      <td>1.65</td>\n",
       "      <td>2.11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-10-02</th>\n",
       "      <td>1.48</td>\n",
       "      <td>1.43</td>\n",
       "      <td>1.43</td>\n",
       "      <td>1.53</td>\n",
       "      <td>1.60</td>\n",
       "      <td>2.09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-10-03</th>\n",
       "      <td>1.39</td>\n",
       "      <td>1.34</td>\n",
       "      <td>1.34</td>\n",
       "      <td>1.45</td>\n",
       "      <td>1.54</td>\n",
       "      <td>2.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-10-04</th>\n",
       "      <td>1.40</td>\n",
       "      <td>1.35</td>\n",
       "      <td>1.34</td>\n",
       "      <td>1.43</td>\n",
       "      <td>1.52</td>\n",
       "      <td>2.01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-10-07</th>\n",
       "      <td>1.46</td>\n",
       "      <td>1.41</td>\n",
       "      <td>1.38</td>\n",
       "      <td>1.47</td>\n",
       "      <td>1.56</td>\n",
       "      <td>2.05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-10-08</th>\n",
       "      <td>1.42</td>\n",
       "      <td>1.38</td>\n",
       "      <td>1.36</td>\n",
       "      <td>1.45</td>\n",
       "      <td>1.54</td>\n",
       "      <td>2.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-10-09</th>\n",
       "      <td>1.47</td>\n",
       "      <td>1.43</td>\n",
       "      <td>1.40</td>\n",
       "      <td>1.50</td>\n",
       "      <td>1.59</td>\n",
       "      <td>2.08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-10-10</th>\n",
       "      <td>1.53</td>\n",
       "      <td>1.49</td>\n",
       "      <td>1.48</td>\n",
       "      <td>1.57</td>\n",
       "      <td>1.67</td>\n",
       "      <td>2.16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-10-11</th>\n",
       "      <td>1.63</td>\n",
       "      <td>1.60</td>\n",
       "      <td>1.59</td>\n",
       "      <td>1.68</td>\n",
       "      <td>1.76</td>\n",
       "      <td>2.22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-10-15</th>\n",
       "      <td>1.61</td>\n",
       "      <td>1.60</td>\n",
       "      <td>1.59</td>\n",
       "      <td>1.68</td>\n",
       "      <td>1.77</td>\n",
       "      <td>2.23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-10-16</th>\n",
       "      <td>1.58</td>\n",
       "      <td>1.57</td>\n",
       "      <td>1.57</td>\n",
       "      <td>1.65</td>\n",
       "      <td>1.75</td>\n",
       "      <td>2.23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-10-17</th>\n",
       "      <td>1.60</td>\n",
       "      <td>1.57</td>\n",
       "      <td>1.57</td>\n",
       "      <td>1.66</td>\n",
       "      <td>1.76</td>\n",
       "      <td>2.24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-10-18</th>\n",
       "      <td>1.58</td>\n",
       "      <td>1.56</td>\n",
       "      <td>1.56</td>\n",
       "      <td>1.66</td>\n",
       "      <td>1.76</td>\n",
       "      <td>2.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-10-21</th>\n",
       "      <td>1.62</td>\n",
       "      <td>1.59</td>\n",
       "      <td>1.61</td>\n",
       "      <td>1.70</td>\n",
       "      <td>1.80</td>\n",
       "      <td>2.28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-10-22</th>\n",
       "      <td>1.60</td>\n",
       "      <td>1.59</td>\n",
       "      <td>1.60</td>\n",
       "      <td>1.68</td>\n",
       "      <td>1.78</td>\n",
       "      <td>2.26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-10-23</th>\n",
       "      <td>1.58</td>\n",
       "      <td>1.58</td>\n",
       "      <td>1.58</td>\n",
       "      <td>1.67</td>\n",
       "      <td>1.77</td>\n",
       "      <td>2.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-10-24</th>\n",
       "      <td>1.58</td>\n",
       "      <td>1.58</td>\n",
       "      <td>1.58</td>\n",
       "      <td>1.67</td>\n",
       "      <td>1.77</td>\n",
       "      <td>2.26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-10-25</th>\n",
       "      <td>1.63</td>\n",
       "      <td>1.62</td>\n",
       "      <td>1.62</td>\n",
       "      <td>1.71</td>\n",
       "      <td>1.80</td>\n",
       "      <td>2.29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-10-28</th>\n",
       "      <td>1.64</td>\n",
       "      <td>1.65</td>\n",
       "      <td>1.66</td>\n",
       "      <td>1.75</td>\n",
       "      <td>1.85</td>\n",
       "      <td>2.34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-10-29</th>\n",
       "      <td>1.64</td>\n",
       "      <td>1.65</td>\n",
       "      <td>1.66</td>\n",
       "      <td>1.74</td>\n",
       "      <td>1.84</td>\n",
       "      <td>2.33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-10-30</th>\n",
       "      <td>1.61</td>\n",
       "      <td>1.60</td>\n",
       "      <td>1.61</td>\n",
       "      <td>1.69</td>\n",
       "      <td>1.78</td>\n",
       "      <td>2.26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-10-31</th>\n",
       "      <td>1.52</td>\n",
       "      <td>1.52</td>\n",
       "      <td>1.51</td>\n",
       "      <td>1.60</td>\n",
       "      <td>1.69</td>\n",
       "      <td>2.17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-11-01</th>\n",
       "      <td>1.56</td>\n",
       "      <td>1.55</td>\n",
       "      <td>1.55</td>\n",
       "      <td>1.63</td>\n",
       "      <td>1.73</td>\n",
       "      <td>2.21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-11-04</th>\n",
       "      <td>1.60</td>\n",
       "      <td>1.59</td>\n",
       "      <td>1.60</td>\n",
       "      <td>1.69</td>\n",
       "      <td>1.79</td>\n",
       "      <td>2.27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-11-05</th>\n",
       "      <td>1.63</td>\n",
       "      <td>1.63</td>\n",
       "      <td>1.66</td>\n",
       "      <td>1.77</td>\n",
       "      <td>1.86</td>\n",
       "      <td>2.34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-11-06</th>\n",
       "      <td>1.61</td>\n",
       "      <td>1.60</td>\n",
       "      <td>1.63</td>\n",
       "      <td>1.73</td>\n",
       "      <td>1.81</td>\n",
       "      <td>2.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-11-07</th>\n",
       "      <td>1.68</td>\n",
       "      <td>1.70</td>\n",
       "      <td>1.74</td>\n",
       "      <td>1.84</td>\n",
       "      <td>1.92</td>\n",
       "      <td>2.40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-11-08</th>\n",
       "      <td>1.68</td>\n",
       "      <td>1.70</td>\n",
       "      <td>1.74</td>\n",
       "      <td>1.86</td>\n",
       "      <td>1.94</td>\n",
       "      <td>2.43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-11-12</th>\n",
       "      <td>1.66</td>\n",
       "      <td>1.69</td>\n",
       "      <td>1.73</td>\n",
       "      <td>1.84</td>\n",
       "      <td>1.92</td>\n",
       "      <td>2.39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-11-13</th>\n",
       "      <td>1.63</td>\n",
       "      <td>1.65</td>\n",
       "      <td>1.69</td>\n",
       "      <td>1.79</td>\n",
       "      <td>1.88</td>\n",
       "      <td>2.36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-11-14</th>\n",
       "      <td>1.58</td>\n",
       "      <td>1.59</td>\n",
       "      <td>1.63</td>\n",
       "      <td>1.73</td>\n",
       "      <td>1.82</td>\n",
       "      <td>2.31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-11-15</th>\n",
       "      <td>1.61</td>\n",
       "      <td>1.61</td>\n",
       "      <td>1.65</td>\n",
       "      <td>1.75</td>\n",
       "      <td>1.84</td>\n",
       "      <td>2.31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-11-18</th>\n",
       "      <td>1.60</td>\n",
       "      <td>1.59</td>\n",
       "      <td>1.63</td>\n",
       "      <td>1.73</td>\n",
       "      <td>1.81</td>\n",
       "      <td>2.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-11-19</th>\n",
       "      <td>1.60</td>\n",
       "      <td>1.59</td>\n",
       "      <td>1.63</td>\n",
       "      <td>1.71</td>\n",
       "      <td>1.79</td>\n",
       "      <td>2.26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-11-20</th>\n",
       "      <td>1.56</td>\n",
       "      <td>1.55</td>\n",
       "      <td>1.58</td>\n",
       "      <td>1.66</td>\n",
       "      <td>1.73</td>\n",
       "      <td>2.20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-11-21</th>\n",
       "      <td>1.60</td>\n",
       "      <td>1.59</td>\n",
       "      <td>1.62</td>\n",
       "      <td>1.71</td>\n",
       "      <td>1.77</td>\n",
       "      <td>2.24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-11-22</th>\n",
       "      <td>1.61</td>\n",
       "      <td>1.60</td>\n",
       "      <td>1.62</td>\n",
       "      <td>1.71</td>\n",
       "      <td>1.77</td>\n",
       "      <td>2.22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-11-25</th>\n",
       "      <td>1.61</td>\n",
       "      <td>1.60</td>\n",
       "      <td>1.62</td>\n",
       "      <td>1.71</td>\n",
       "      <td>1.76</td>\n",
       "      <td>2.21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-11-26</th>\n",
       "      <td>1.58</td>\n",
       "      <td>1.58</td>\n",
       "      <td>1.58</td>\n",
       "      <td>1.68</td>\n",
       "      <td>1.74</td>\n",
       "      <td>2.18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-11-27</th>\n",
       "      <td>1.63</td>\n",
       "      <td>1.61</td>\n",
       "      <td>1.63</td>\n",
       "      <td>1.71</td>\n",
       "      <td>1.77</td>\n",
       "      <td>2.19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-11-29</th>\n",
       "      <td>1.61</td>\n",
       "      <td>1.61</td>\n",
       "      <td>1.62</td>\n",
       "      <td>1.73</td>\n",
       "      <td>1.78</td>\n",
       "      <td>2.21</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            DGS2  DGS3  DGS5  DGS7  DGS10  DGS30\n",
       "DATE                                            \n",
       "2019-10-01  1.56  1.51  1.51  1.59   1.65   2.11\n",
       "2019-10-02  1.48  1.43  1.43  1.53   1.60   2.09\n",
       "2019-10-03  1.39  1.34  1.34  1.45   1.54   2.04\n",
       "2019-10-04  1.40  1.35  1.34  1.43   1.52   2.01\n",
       "2019-10-07  1.46  1.41  1.38  1.47   1.56   2.05\n",
       "2019-10-08  1.42  1.38  1.36  1.45   1.54   2.04\n",
       "2019-10-09  1.47  1.43  1.40  1.50   1.59   2.08\n",
       "2019-10-10  1.53  1.49  1.48  1.57   1.67   2.16\n",
       "2019-10-11  1.63  1.60  1.59  1.68   1.76   2.22\n",
       "2019-10-15  1.61  1.60  1.59  1.68   1.77   2.23\n",
       "2019-10-16  1.58  1.57  1.57  1.65   1.75   2.23\n",
       "2019-10-17  1.60  1.57  1.57  1.66   1.76   2.24\n",
       "2019-10-18  1.58  1.56  1.56  1.66   1.76   2.25\n",
       "2019-10-21  1.62  1.59  1.61  1.70   1.80   2.28\n",
       "2019-10-22  1.60  1.59  1.60  1.68   1.78   2.26\n",
       "2019-10-23  1.58  1.58  1.58  1.67   1.77   2.25\n",
       "2019-10-24  1.58  1.58  1.58  1.67   1.77   2.26\n",
       "2019-10-25  1.63  1.62  1.62  1.71   1.80   2.29\n",
       "2019-10-28  1.64  1.65  1.66  1.75   1.85   2.34\n",
       "2019-10-29  1.64  1.65  1.66  1.74   1.84   2.33\n",
       "2019-10-30  1.61  1.60  1.61  1.69   1.78   2.26\n",
       "2019-10-31  1.52  1.52  1.51  1.60   1.69   2.17\n",
       "2019-11-01  1.56  1.55  1.55  1.63   1.73   2.21\n",
       "2019-11-04  1.60  1.59  1.60  1.69   1.79   2.27\n",
       "2019-11-05  1.63  1.63  1.66  1.77   1.86   2.34\n",
       "2019-11-06  1.61  1.60  1.63  1.73   1.81   2.30\n",
       "2019-11-07  1.68  1.70  1.74  1.84   1.92   2.40\n",
       "2019-11-08  1.68  1.70  1.74  1.86   1.94   2.43\n",
       "2019-11-12  1.66  1.69  1.73  1.84   1.92   2.39\n",
       "2019-11-13  1.63  1.65  1.69  1.79   1.88   2.36\n",
       "2019-11-14  1.58  1.59  1.63  1.73   1.82   2.31\n",
       "2019-11-15  1.61  1.61  1.65  1.75   1.84   2.31\n",
       "2019-11-18  1.60  1.59  1.63  1.73   1.81   2.30\n",
       "2019-11-19  1.60  1.59  1.63  1.71   1.79   2.26\n",
       "2019-11-20  1.56  1.55  1.58  1.66   1.73   2.20\n",
       "2019-11-21  1.60  1.59  1.62  1.71   1.77   2.24\n",
       "2019-11-22  1.61  1.60  1.62  1.71   1.77   2.22\n",
       "2019-11-25  1.61  1.60  1.62  1.71   1.76   2.21\n",
       "2019-11-26  1.58  1.58  1.58  1.68   1.74   2.18\n",
       "2019-11-27  1.63  1.61  1.63  1.71   1.77   2.19\n",
       "2019-11-29  1.61  1.61  1.62  1.73   1.78   2.21"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "treasury_data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a0783fac",
   "metadata": {},
   "source": [
    "<h3>4.2 & 3 Ploting gold and equity ETF prices</h3>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "ebf13f97",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10,6))\n",
    "gold_etf=pd.concat([gold_etf_oct_data[\"Adj Close\"],gold_etf_nov_data[\"Adj Close\"]])\n",
    "equity_etf=pd.concat([equity_etf_oct_data[\"Adj Close\"],equity_etf_nov_data[\"Adj Close\"]])\n",
    "\n",
    "ax1 = gold_etf.plot(color='green', label='Gold ETF')\n",
    "ax2 = equity_etf.plot(color='red', secondary_y=True,label='Equity ETF')\n",
    "ax1.set_xlabel(\"Date\")\n",
    "ax1.set_ylabel(\"Gold ETF Price\")\n",
    "ax2.set_xlabel(\"Date\")\n",
    "ax2.set_ylabel(\"Equity ETF Price\")\n",
    "\n",
    "h1, l1 = ax1.get_legend_handles_labels()\n",
    "h2, l2 = ax2.get_legend_handles_labels()\n",
    "\n",
    "plt.legend(h1+h2, l1+l2, loc=2)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "ec99a251",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Date\n",
       "2019-10-01    14.77\n",
       "2019-10-02    14.95\n",
       "2019-10-03    15.03\n",
       "2019-10-04    15.03\n",
       "2019-10-07    14.89\n",
       "2019-10-08    15.02\n",
       "2019-10-09    15.05\n",
       "2019-10-10    14.91\n",
       "2019-10-11    14.82\n",
       "2019-10-14    14.90\n",
       "2019-10-15    14.78\n",
       "2019-10-16    14.86\n",
       "2019-10-17    14.88\n",
       "2019-10-18    14.87\n",
       "2019-10-21    14.80\n",
       "2019-10-22    14.85\n",
       "2019-10-23    14.89\n",
       "2019-10-24    15.00\n",
       "2019-10-25    15.02\n",
       "2019-10-28    14.89\n",
       "2019-10-29    14.85\n",
       "2019-10-30    14.93\n",
       "2019-10-31    15.08\n",
       "2019-11-01    15.09\n",
       "2019-11-04    15.05\n",
       "2019-11-05    14.82\n",
       "2019-11-06    14.87\n",
       "2019-11-07    14.65\n",
       "2019-11-08    14.56\n",
       "2019-11-11    14.52\n",
       "2019-11-12    14.56\n",
       "2019-11-13    14.61\n",
       "2019-11-14    14.66\n",
       "2019-11-15    14.64\n",
       "2019-11-18    14.69\n",
       "2019-11-19    14.68\n",
       "2019-11-20    14.70\n",
       "2019-11-21    14.61\n",
       "2019-11-22    14.59\n",
       "2019-11-25    14.52\n",
       "2019-11-26    14.58\n",
       "2019-11-27    14.51\n",
       "2019-11-29    14.61\n",
       "Name: Adj Close, dtype: float64"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gold_etf"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "847a0792",
   "metadata": {},
   "source": [
    "<h1>5. Fitting the Yield Curve</h1>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b58f44b8",
   "metadata": {},
   "source": [
    "# 5.1 Nelson-Siegel Equation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "d0289ef7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "f (t) = β0 + β1 * exp(-t / Ʈ) + β2 * exp(-t / Ʈ) * (-t / Ʈ)\n"
     ]
    }
   ],
   "source": [
    "print(\"f (t) = β0 + β1 * exp(-t / Ʈ) + β2 * exp(-t / Ʈ) * (-t / Ʈ)\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1637be8a",
   "metadata": {},
   "source": [
    "# 5.2 For October Data\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "303ea8dd",
   "metadata": {},
   "outputs": [],
   "source": [
    "# !pip install nelson_siegel_svensson\n",
    "from nelson_siegel_svensson import NelsonSiegelCurve\n",
    "from nelson_siegel_svensson.calibrate import calibrate_ns_ols"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "6779ee39",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "For month of October\n",
      "NelsonSiegelCurve(beta0=2.5349155033192985, beta1=-0.8131504942441159, beta2=-1.88649990565442, tau=3.843123719277597)\n",
      "For month of November\n",
      "NelsonSiegelCurve(beta0=2.654784157142379, beta1=-0.9992541248984628, beta2=-1.435000541601094, tau=4.654243936830383)\n"
     ]
    }
   ],
   "source": [
    "t = np.array(n)\n",
    "y_oct=np.array(np.mean(treasury_data_oct))\n",
    "y_nov=np.array(np.mean(treasury_data_nov))\n",
    "curve_fit_oct, status_oct = calibrate_ns_ols(t, y_oct) #NS model calibrate\n",
    "curve_fit_nov, status_oct = calibrate_ns_ols(t, y_nov) #NS model calibrate\n",
    "\n",
    "print(\"For month of October\")\n",
    "print(curve_fit_oct)\n",
    "print(\"For month of November\")\n",
    "print(curve_fit_nov)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "8d0bc1d8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "t=np.array([i for i in np.linspace(0,1,11)])\n",
    "t=np.append(t,np.array([i for i in range(1,31,1)]))\n",
    "NS_Fwd_oct = np.array([ NelsonSiegelCurve.forward(curve_fit_oct,i) for i in t])\n",
    "NS_Fwd_nov = np.array([ NelsonSiegelCurve.forward(curve_fit_nov,i) for i in t])\n",
    "plt.figure(figsize=(10,6))\n",
    "ax1=plt.plot(t,NS_Fwd_oct,color='green', label='October')\n",
    "ax2=plt.plot(t,NS_Fwd_nov,color='red', label='November')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a76412b",
   "metadata": {},
   "source": [
    "Here we see significant difference between the values of tau(hump) for the months of October and November. For the month of November it is quite high where as the slope(beta2) has become less negative. This means that the hump/curvature of the curve has decreased and the slope has become less negative i.e more positive, This implies that the rate of return is seen to be on the rise for the month of november as can be seen in the graph above"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "166487c9",
   "metadata": {},
   "source": [
    "# 6. Modelling Prices"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "4ed3548d",
   "metadata": {},
   "outputs": [],
   "source": [
    "from statsmodels.tsa.arima.model import ARIMA\n",
    "def apply_ARIMA_model(df,is_28_holiday=False):\n",
    "    proposed_index=pd.period_range(df.index[0],df.index[df.index.shape[0]-1],freq='B')\n",
    "    ignore = []\n",
    "    if is_28_holiday:\n",
    "        for each in proposed_index:\n",
    "            if each.month==11 and each.day ==28:\n",
    "                ignore.append(each)\n",
    "        proposed_index=proposed_index.drop(ignore)\n",
    "    df.index=proposed_index\n",
    "    \n",
    "    model=ARIMA(df,order=(1,0,1))\n",
    "    \n",
    "    model_fit = model.fit()\n",
    "    \n",
    "    print(model_fit.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "68b3c386",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                               SARIMAX Results                                \n",
      "==============================================================================\n",
      "Dep. Variable:              Adj Close   No. Observations:                   23\n",
      "Model:                 ARIMA(1, 0, 1)   Log Likelihood                  25.426\n",
      "Date:                Mon, 04 Apr 2022   AIC                            -42.852\n",
      "Time:                        19:13:26   BIC                            -38.310\n",
      "Sample:                    10-01-2019   HQIC                           -41.710\n",
      "                         - 10-31-2019                                         \n",
      "Covariance Type:                  opg                                         \n",
      "==============================================================================\n",
      "                 coef    std err          z      P>|z|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const         14.9161      0.026    571.853      0.000      14.865      14.967\n",
      "ar.L1          0.1328      0.592      0.224      0.823      -1.028       1.294\n",
      "ma.L1          0.4215      0.529      0.797      0.425      -0.615       1.458\n",
      "sigma2         0.0063      0.003      2.332      0.020       0.001       0.012\n",
      "===================================================================================\n",
      "Ljung-Box (L1) (Q):                   0.04   Jarque-Bera (JB):                 0.76\n",
      "Prob(Q):                              0.84   Prob(JB):                         0.68\n",
      "Heteroskedasticity (H):               0.61   Skew:                            -0.00\n",
      "Prob(H) (two-sided):                  0.49   Kurtosis:                         2.11\n",
      "===================================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Covariance matrix calculated using the outer product of gradients (complex-step).\n"
     ]
    }
   ],
   "source": [
    "apply_ARIMA_model(gold_etf_oct_data['Adj Close'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "2a3a1f6c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                               SARIMAX Results                                \n",
      "==============================================================================\n",
      "Dep. Variable:              Adj Close   No. Observations:                   20\n",
      "Model:                 ARIMA(1, 0, 1)   Log Likelihood                  19.110\n",
      "Date:                Mon, 04 Apr 2022   AIC                            -30.221\n",
      "Time:                        19:13:26   BIC                            -26.238\n",
      "Sample:                    11-01-2019   HQIC                           -29.443\n",
      "                         - 11-29-2019                                         \n",
      "Covariance Type:                  opg                                         \n",
      "==============================================================================\n",
      "                 coef    std err          z      P>|z|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const         14.7564      0.148     99.616      0.000      14.466      15.047\n",
      "ar.L1          0.8936      0.134      6.674      0.000       0.631       1.156\n",
      "ma.L1          0.0271      0.279      0.097      0.923      -0.519       0.574\n",
      "sigma2         0.0080      0.002      3.239      0.001       0.003       0.013\n",
      "===================================================================================\n",
      "Ljung-Box (L1) (Q):                   0.80   Jarque-Bera (JB):                 0.66\n",
      "Prob(Q):                              0.37   Prob(JB):                         0.72\n",
      "Heteroskedasticity (H):               0.27   Skew:                            -0.45\n",
      "Prob(H) (two-sided):                  0.11   Kurtosis:                         2.96\n",
      "===================================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Covariance matrix calculated using the outer product of gradients (complex-step).\n"
     ]
    }
   ],
   "source": [
    "apply_ARIMA_model(gold_etf_nov_data['Adj Close'],True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "7133b432",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                               SARIMAX Results                                \n",
      "==============================================================================\n",
      "Dep. Variable:              Adj Close   No. Observations:                   23\n",
      "Model:                 ARIMA(1, 0, 1)   Log Likelihood                -135.229\n",
      "Date:                Mon, 04 Apr 2022   AIC                            278.459\n",
      "Time:                        19:13:27   BIC                            283.001\n",
      "Sample:                    10-01-2019   HQIC                           279.601\n",
      "                         - 10-31-2019                                         \n",
      "Covariance Type:                  opg                                         \n",
      "==============================================================================\n",
      "                 coef    std err          z      P>|z|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const       1.539e+04     32.619    471.756      0.000    1.53e+04    1.55e+04\n",
      "ar.L1          0.1122      0.293      0.382      0.702      -0.463       0.687\n",
      "ma.L1          0.7246      0.272      2.663      0.008       0.191       1.258\n",
      "sigma2      7197.4690   2676.778      2.689      0.007    1951.080    1.24e+04\n",
      "===================================================================================\n",
      "Ljung-Box (L1) (Q):                   0.16   Jarque-Bera (JB):                 0.33\n",
      "Prob(Q):                              0.69   Prob(JB):                         0.85\n",
      "Heteroskedasticity (H):               0.21   Skew:                            -0.07\n",
      "Prob(H) (two-sided):                  0.04   Kurtosis:                         2.43\n",
      "===================================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Covariance matrix calculated using the outer product of gradients (complex-step).\n"
     ]
    }
   ],
   "source": [
    "apply_ARIMA_model(equity_etf_oct_data['Adj Close'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "9783f07b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                               SARIMAX Results                                \n",
      "==============================================================================\n",
      "Dep. Variable:              Adj Close   No. Observations:                   21\n",
      "Model:                 ARIMA(1, 0, 1)   Log Likelihood                -122.754\n",
      "Date:                Mon, 04 Apr 2022   AIC                            253.508\n",
      "Time:                        19:13:27   BIC                            257.686\n",
      "Sample:                    11-01-2019   HQIC                           254.415\n",
      "                         - 11-29-2019                                         \n",
      "Covariance Type:                  opg                                         \n",
      "==============================================================================\n",
      "                 coef    std err          z      P>|z|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const       1.571e+04     30.682    511.917      0.000    1.56e+04    1.58e+04\n",
      "ar.L1         -0.0944      0.429     -0.220      0.826      -0.936       0.747\n",
      "ma.L1          0.9856      1.847      0.534      0.594      -2.634       4.605\n",
      "sigma2      6175.1525   1.06e+04      0.583      0.560   -1.46e+04    2.69e+04\n",
      "===================================================================================\n",
      "Ljung-Box (L1) (Q):                   0.09   Jarque-Bera (JB):                 0.45\n",
      "Prob(Q):                              0.77   Prob(JB):                         0.80\n",
      "Heteroskedasticity (H):               0.48   Skew:                             0.32\n",
      "Prob(H) (two-sided):                  0.35   Kurtosis:                         3.33\n",
      "===================================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Covariance matrix calculated using the outer product of gradients (complex-step).\n"
     ]
    }
   ],
   "source": [
    "apply_ARIMA_model(equity_etf_nov_data['Adj Close'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e8ab2bc2",
   "metadata": {},
   "source": [
    "# 7. Modelling Volatility "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "050e9e4c",
   "metadata": {},
   "outputs": [],
   "source": [
    "#pip install arch\n",
    "from arch import arch_model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "72c31176",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.09913046463676121\n",
      "0.006327883984456259\n"
     ]
    }
   ],
   "source": [
    "gold_etf_oct_data['High_Minus_Low']=gold_etf_oct_data['High']-gold_etf_oct_data['Low']\n",
    "print(np.mean(gold_etf_oct_data['High_Minus_Low']))\n",
    "print(np.std(gold_etf_oct_data['Daily_Return']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "357374d7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Iteration:      1,   Func. Count:      5,   Neg. LLF: 10257493.419153359\n",
      "Iteration:      2,   Func. Count:     11,   Neg. LLF: 23.38368462757591\n",
      "Iteration:      3,   Func. Count:     16,   Neg. LLF: 22.92681403956135\n",
      "Iteration:      4,   Func. Count:     21,   Neg. LLF: 22.53521134894541\n",
      "Iteration:      5,   Func. Count:     26,   Neg. LLF: 22.202753009337886\n",
      "Iteration:      6,   Func. Count:     31,   Neg. LLF: 21.379375768732203\n",
      "Iteration:      7,   Func. Count:     36,   Neg. LLF: 21.22764896852193\n",
      "Iteration:      8,   Func. Count:     41,   Neg. LLF: 21.199416822469416\n",
      "Iteration:      9,   Func. Count:     45,   Neg. LLF: 21.264010078143514\n",
      "Iteration:     10,   Func. Count:     50,   Neg. LLF: 21.184268721197604\n",
      "Iteration:     11,   Func. Count:     54,   Neg. LLF: 21.18366861567828\n",
      "Iteration:     12,   Func. Count:     58,   Neg. LLF: 21.18364704647474\n",
      "Iteration:     13,   Func. Count:     62,   Neg. LLF: 21.183645491816698\n",
      "Iteration:     14,   Func. Count:     65,   Neg. LLF: 21.183645491809656\n",
      "Optimization terminated successfully    (Exit mode 0)\n",
      "            Current function value: 21.183645491816698\n",
      "            Iterations: 14\n",
      "            Function evaluations: 65\n",
      "            Gradient evaluations: 14\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>Zero Mean - GARCH Model Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>    <td>Daily_Return</td>    <th>  R-squared:         </th>  <td>   0.000</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Mean Model:</th>         <td>Zero Mean</td>     <th>  Adj. R-squared:    </th>  <td>   0.045</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Vol Model:</th>            <td>GARCH</td>       <th>  Log-Likelihood:    </th> <td>  -21.1836</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Distribution:</th>        <td>Normal</td>       <th>  AIC:               </th> <td>   48.3673</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>        <td>Maximum Likelihood</td> <th>  BIC:               </th> <td>   51.6404</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th></th>                        <td></td>          <th>  No. Observations:  </th>     <td>22</td>    \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>           <td>Mon, Apr 04 2022</td>  <th>  Df Residuals:      </th>     <td>22</td>    \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>               <td>19:13:29</td>      <th>  Df Model:          </th>      <td>0</td>    \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<caption>Volatility Model</caption>\n",
       "<tr>\n",
       "      <td></td>        <th>coef</th>     <th>std err</th>      <th>t</th>       <th>P>|t|</th>      <th>95.0% Conf. Int.</th>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>omega</th>    <td>    0.0372</td> <td>5.853e-02</td> <td>    0.635</td> <td>    0.525</td>  <td>[-7.753e-02,  0.152]</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>alpha[1]</th>   <td>0.0000</td>   <td>3.821e-02</td>   <td>0.000</td>   <td>    1.000</td> <td>[-7.488e-02,7.488e-02]</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>beta[1]</th>  <td>    0.8854</td> <td>    0.187</td> <td>    4.722</td> <td>2.331e-06</td>    <td>[  0.518,  1.253]</td>  \n",
       "</tr>\n",
       "</table><br/><br/>Covariance estimator: robust"
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                       Zero Mean - GARCH Model Results                        \n",
       "==============================================================================\n",
       "Dep. Variable:           Daily_Return   R-squared:                       0.000\n",
       "Mean Model:                 Zero Mean   Adj. R-squared:                  0.045\n",
       "Vol Model:                      GARCH   Log-Likelihood:               -21.1836\n",
       "Distribution:                  Normal   AIC:                           48.3673\n",
       "Method:            Maximum Likelihood   BIC:                           51.6404\n",
       "                                        No. Observations:                   22\n",
       "Date:                Mon, Apr 04 2022   Df Residuals:                       22\n",
       "Time:                        19:13:29   Df Model:                            0\n",
       "                               Volatility Model                              \n",
       "=============================================================================\n",
       "                 coef    std err          t      P>|t|       95.0% Conf. Int.\n",
       "-----------------------------------------------------------------------------\n",
       "omega          0.0372  5.853e-02      0.635      0.525   [-7.753e-02,  0.152]\n",
       "alpha[1]       0.0000  3.821e-02      0.000      1.000 [-7.488e-02,7.488e-02]\n",
       "beta[1]        0.8854      0.187      4.722  2.331e-06      [  0.518,  1.253]\n",
       "=============================================================================\n",
       "\n",
       "Covariance estimator: robust\n",
       "\"\"\""
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gold_etf_oct_data\n",
    "model = arch_model(gold_etf_oct_data['Daily_Return'].dropna(), mean='Zero', vol='GARCH', p=1, q=1,rescale=True)\n",
    "model.fit().summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "1c982199",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.09599990844726562\n",
      "0.005916672815345964\n"
     ]
    }
   ],
   "source": [
    "gold_etf_nov_data['High_Minus_Low']=gold_etf_nov_data['High']-gold_etf_nov_data['Low']\n",
    "print(np.mean(gold_etf_nov_data['High_Minus_Low']))\n",
    "print(np.std(gold_etf_nov_data['Daily_Return']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "435b93e2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Iteration:      1,   Func. Count:      5,   Neg. LLF: 7706610.991278934\n",
      "Iteration:      2,   Func. Count:     11,   Neg. LLF: 17.772622178076134\n",
      "Iteration:      3,   Func. Count:     18,   Neg. LLF: 17.08497558724045\n",
      "Iteration:      4,   Func. Count:     23,   Neg. LLF: 16.876347434936363\n",
      "Iteration:      5,   Func. Count:     28,   Neg. LLF: 16.70597326874686\n",
      "Iteration:      6,   Func. Count:     32,   Neg. LLF: 16.767485946051824\n",
      "Iteration:      7,   Func. Count:     37,   Neg. LLF: 16.909194171863305\n",
      "Iteration:      8,   Func. Count:     42,   Neg. LLF: 16.494594543089608\n",
      "Iteration:      9,   Func. Count:     46,   Neg. LLF: 16.49285952022598\n",
      "Iteration:     10,   Func. Count:     50,   Neg. LLF: 16.49280570944355\n",
      "Iteration:     11,   Func. Count:     54,   Neg. LLF: 16.492788315750172\n",
      "Iteration:     12,   Func. Count:     57,   Neg. LLF: 16.49278831576482\n",
      "Optimization terminated successfully    (Exit mode 0)\n",
      "            Current function value: 16.492788315750172\n",
      "            Iterations: 12\n",
      "            Function evaluations: 57\n",
      "            Gradient evaluations: 12\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>Zero Mean - GARCH Model Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>    <td>Daily_Return</td>    <th>  R-squared:         </th>  <td>   0.000</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Mean Model:</th>         <td>Zero Mean</td>     <th>  Adj. R-squared:    </th>  <td>   0.053</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Vol Model:</th>            <td>GARCH</td>       <th>  Log-Likelihood:    </th> <td>  -16.4928</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Distribution:</th>        <td>Normal</td>       <th>  AIC:               </th> <td>   38.9856</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>        <td>Maximum Likelihood</td> <th>  BIC:               </th> <td>   41.8189</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th></th>                        <td></td>          <th>  No. Observations:  </th>     <td>19</td>    \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>           <td>Mon, Apr 04 2022</td>  <th>  Df Residuals:      </th>     <td>19</td>    \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>               <td>19:13:31</td>      <th>  Df Model:          </th>      <td>0</td>    \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<caption>Volatility Model</caption>\n",
       "<tr>\n",
       "      <td></td>        <th>coef</th>     <th>std err</th>      <th>t</th>       <th>P>|t|</th>      <th>95.0% Conf. Int.</th>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>omega</th>    <td>    0.0148</td> <td>2.991e-02</td> <td>    0.496</td> <td>    0.620</td> <td>[-4.381e-02,7.345e-02]</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>alpha[1]</th> <td>4.6574e-15</td> <td>4.088e-02</td> <td>1.139e-13</td> <td>    1.000</td> <td>[-8.013e-02,8.013e-02]</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>beta[1]</th>  <td>    0.8954</td> <td>    0.155</td> <td>    5.792</td> <td>6.943e-09</td>    <td>[  0.592,  1.198]</td>  \n",
       "</tr>\n",
       "</table><br/><br/>Covariance estimator: robust"
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                       Zero Mean - GARCH Model Results                        \n",
       "==============================================================================\n",
       "Dep. Variable:           Daily_Return   R-squared:                       0.000\n",
       "Mean Model:                 Zero Mean   Adj. R-squared:                  0.053\n",
       "Vol Model:                      GARCH   Log-Likelihood:               -16.4928\n",
       "Distribution:                  Normal   AIC:                           38.9856\n",
       "Method:            Maximum Likelihood   BIC:                           41.8189\n",
       "                                        No. Observations:                   19\n",
       "Date:                Mon, Apr 04 2022   Df Residuals:                       19\n",
       "Time:                        19:13:31   Df Model:                            0\n",
       "                               Volatility Model                              \n",
       "=============================================================================\n",
       "                 coef    std err          t      P>|t|       95.0% Conf. Int.\n",
       "-----------------------------------------------------------------------------\n",
       "omega          0.0148  2.991e-02      0.496      0.620 [-4.381e-02,7.345e-02]\n",
       "alpha[1]   4.6574e-15  4.088e-02  1.139e-13      1.000 [-8.013e-02,8.013e-02]\n",
       "beta[1]        0.8954      0.155      5.792  6.943e-09      [  0.592,  1.198]\n",
       "=============================================================================\n",
       "\n",
       "Covariance estimator: robust\n",
       "\"\"\""
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gold_etf_nov_data\n",
    "model = arch_model(gold_etf_nov_data['Daily_Return'].dropna(), mean='Zero', vol='GARCH', p=1, q=1,rescale=True)\n",
    "model.fit().summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "3dae1cb6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "33.03910495923913\n",
      "0.007043800769962042\n"
     ]
    }
   ],
   "source": [
    "equity_etf_oct_data['High_Minus_Low']=equity_etf_oct_data['High']-equity_etf_oct_data['Low']\n",
    "print(np.mean(equity_etf_oct_data['High_Minus_Low']))\n",
    "print(np.std(equity_etf_oct_data['Daily_Return']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "2d816255",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Iteration:      1,   Func. Count:      5,   Neg. LLF: 7524006.252600843\n",
      "Iteration:      2,   Func. Count:     10,   Neg. LLF: 23.82537267872309\n",
      "Iteration:      3,   Func. Count:     17,   Neg. LLF: 21.33081269499909\n",
      "Iteration:      4,   Func. Count:     22,   Neg. LLF: 20.21422748913699\n",
      "Iteration:      5,   Func. Count:     26,   Neg. LLF: 20.114085317546063\n",
      "Iteration:      6,   Func. Count:     30,   Neg. LLF: 20.07176567387288\n",
      "Iteration:      7,   Func. Count:     34,   Neg. LLF: 20.070904266415305\n",
      "Iteration:      8,   Func. Count:     38,   Neg. LLF: 20.070899902423786\n",
      "Iteration:      9,   Func. Count:     41,   Neg. LLF: 20.070899902443205\n",
      "Optimization terminated successfully    (Exit mode 0)\n",
      "            Current function value: 20.070899902423786\n",
      "            Iterations: 9\n",
      "            Function evaluations: 41\n",
      "            Gradient evaluations: 9\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>Zero Mean - GARCH Model Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>    <td>Daily_Return</td>    <th>  R-squared:         </th>  <td>   0.000</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Mean Model:</th>         <td>Zero Mean</td>     <th>  Adj. R-squared:    </th>  <td>   0.045</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Vol Model:</th>            <td>GARCH</td>       <th>  Log-Likelihood:    </th> <td>  -20.0709</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Distribution:</th>        <td>Normal</td>       <th>  AIC:               </th> <td>   46.1418</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>        <td>Maximum Likelihood</td> <th>  BIC:               </th> <td>   49.4149</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th></th>                        <td></td>          <th>  No. Observations:  </th>     <td>22</td>    \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>           <td>Mon, Apr 04 2022</td>  <th>  Df Residuals:      </th>     <td>22</td>    \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>               <td>19:13:32</td>      <th>  Df Model:          </th>      <td>0</td>    \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<caption>Volatility Model</caption>\n",
       "<tr>\n",
       "      <td></td>        <th>coef</th>     <th>std err</th>      <th>t</th>       <th>P>|t|</th>      <th>95.0% Conf. Int.</th>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>omega</th>    <td>5.0062e-09</td> <td>3.887e-02</td> <td>1.288e-07</td> <td>    1.000</td> <td>[-7.619e-02,7.619e-02]</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>alpha[1]</th>   <td>0.0000</td>   <td>    0.156</td>   <td>0.000</td>   <td>    1.000</td>    <td>[ -0.305,  0.305]</td>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>beta[1]</th>  <td>    0.9206</td> <td>    0.329</td> <td>    2.797</td> <td>5.155e-03</td>    <td>[  0.276,  1.566]</td>  \n",
       "</tr>\n",
       "</table><br/><br/>Covariance estimator: robust"
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                       Zero Mean - GARCH Model Results                        \n",
       "==============================================================================\n",
       "Dep. Variable:           Daily_Return   R-squared:                       0.000\n",
       "Mean Model:                 Zero Mean   Adj. R-squared:                  0.045\n",
       "Vol Model:                      GARCH   Log-Likelihood:               -20.0709\n",
       "Distribution:                  Normal   AIC:                           46.1418\n",
       "Method:            Maximum Likelihood   BIC:                           49.4149\n",
       "                                        No. Observations:                   22\n",
       "Date:                Mon, Apr 04 2022   Df Residuals:                       22\n",
       "Time:                        19:13:32   Df Model:                            0\n",
       "                               Volatility Model                              \n",
       "=============================================================================\n",
       "                 coef    std err          t      P>|t|       95.0% Conf. Int.\n",
       "-----------------------------------------------------------------------------\n",
       "omega      5.0062e-09  3.887e-02  1.288e-07      1.000 [-7.619e-02,7.619e-02]\n",
       "alpha[1]       0.0000      0.156      0.000      1.000      [ -0.305,  0.305]\n",
       "beta[1]        0.9206      0.329      2.797  5.155e-03      [  0.276,  1.566]\n",
       "=============================================================================\n",
       "\n",
       "Covariance estimator: robust\n",
       "\"\"\""
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "equity_etf_oct_data\n",
    "model = arch_model(equity_etf_oct_data['Daily_Return'].dropna(), mean='Zero', vol='GARCH', p=1, q=1,rescale=True)\n",
    "model.fit().summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "be98277e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "24.935035342261905\n",
      "0.006535289837712417\n"
     ]
    }
   ],
   "source": [
    "equity_etf_nov_data['High_Minus_Low']=equity_etf_nov_data['High']-equity_etf_nov_data['Low']\n",
    "print(np.mean(equity_etf_nov_data['High_Minus_Low']))\n",
    "print(np.std(equity_etf_nov_data['Daily_Return']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "f42d822c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Iteration:      1,   Func. Count:      5,   Neg. LLF: 8681243.490838673\n",
      "Iteration:      2,   Func. Count:     11,   Neg. LLF: 20.025381411260575\n",
      "Iteration:      3,   Func. Count:     16,   Neg. LLF: 19.736985820160854\n",
      "Iteration:      4,   Func. Count:     21,   Neg. LLF: 19.67500396143308\n",
      "Iteration:      5,   Func. Count:     25,   Neg. LLF: 19.548643220480326\n",
      "Iteration:      6,   Func. Count:     29,   Neg. LLF: 19.466172370648692\n",
      "Iteration:      7,   Func. Count:     33,   Neg. LLF: 19.46456474168998\n",
      "Iteration:      8,   Func. Count:     37,   Neg. LLF: 19.464334186167964\n",
      "Iteration:      9,   Func. Count:     40,   Neg. LLF: 19.464334186348495\n",
      "Optimization terminated successfully    (Exit mode 0)\n",
      "            Current function value: 19.464334186167964\n",
      "            Iterations: 9\n",
      "            Function evaluations: 40\n",
      "            Gradient evaluations: 9\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>Zero Mean - GARCH Model Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>    <td>Daily_Return</td>    <th>  R-squared:         </th>  <td>   0.000</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Mean Model:</th>         <td>Zero Mean</td>     <th>  Adj. R-squared:    </th>  <td>   0.050</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Vol Model:</th>            <td>GARCH</td>       <th>  Log-Likelihood:    </th> <td>  -19.4643</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Distribution:</th>        <td>Normal</td>       <th>  AIC:               </th> <td>   44.9287</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>        <td>Maximum Likelihood</td> <th>  BIC:               </th> <td>   47.9159</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th></th>                        <td></td>          <th>  No. Observations:  </th>     <td>20</td>    \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>           <td>Mon, Apr 04 2022</td>  <th>  Df Residuals:      </th>     <td>20</td>    \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>               <td>19:13:33</td>      <th>  Df Model:          </th>      <td>0</td>    \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<caption>Volatility Model</caption>\n",
       "<tr>\n",
       "      <td></td>        <th>coef</th>     <th>std err</th>      <th>t</th>       <th>P>|t|</th>      <th>95.0% Conf. Int.</th>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>omega</th>    <td>4.2825e-09</td> <td>3.563e-02</td> <td>1.202e-07</td> <td>    1.000</td> <td>[-6.983e-02,6.983e-02]</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>alpha[1]</th> <td>2.3134e-13</td> <td>5.407e-02</td> <td>4.279e-12</td> <td>    1.000</td>    <td>[ -0.106,  0.106]</td>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>beta[1]</th>  <td>    0.9707</td> <td>    0.133</td> <td>    7.275</td> <td>3.465e-13</td>    <td>[  0.709,  1.232]</td>  \n",
       "</tr>\n",
       "</table><br/><br/>Covariance estimator: robust"
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                       Zero Mean - GARCH Model Results                        \n",
       "==============================================================================\n",
       "Dep. Variable:           Daily_Return   R-squared:                       0.000\n",
       "Mean Model:                 Zero Mean   Adj. R-squared:                  0.050\n",
       "Vol Model:                      GARCH   Log-Likelihood:               -19.4643\n",
       "Distribution:                  Normal   AIC:                           44.9287\n",
       "Method:            Maximum Likelihood   BIC:                           47.9159\n",
       "                                        No. Observations:                   20\n",
       "Date:                Mon, Apr 04 2022   Df Residuals:                       20\n",
       "Time:                        19:13:33   Df Model:                            0\n",
       "                               Volatility Model                              \n",
       "=============================================================================\n",
       "                 coef    std err          t      P>|t|       95.0% Conf. Int.\n",
       "-----------------------------------------------------------------------------\n",
       "omega      4.2825e-09  3.563e-02  1.202e-07      1.000 [-6.983e-02,6.983e-02]\n",
       "alpha[1]   2.3134e-13  5.407e-02  4.279e-12      1.000      [ -0.106,  0.106]\n",
       "beta[1]        0.9707      0.133      7.275  3.465e-13      [  0.709,  1.232]\n",
       "=============================================================================\n",
       "\n",
       "Covariance estimator: robust\n",
       "\"\"\""
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "equity_etf_nov_data\n",
    "model = arch_model(equity_etf_nov_data['Daily_Return'].dropna(), mean='Zero', vol='GARCH', p=1, q=1,rescale=True)\n",
    "model.fit().summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6e88a982",
   "metadata": {},
   "source": [
    "# 8. Correlation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "081b1769",
   "metadata": {},
   "outputs": [],
   "source": [
    "equity_data_oct = equity_etf_oct_data['Daily_Return'].dropna()\n",
    "gold_data_oct = gold_etf_oct_data['Daily_Return'].dropna()\n",
    "equity_data_nov = equity_etf_nov_data['Daily_Return'].dropna()\n",
    "gold_data_nov = gold_etf_nov_data['Daily_Return'].dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "25bc4d4b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(22,)\n",
      "(22,)\n",
      "(20,)\n",
      "(19,)\n"
     ]
    }
   ],
   "source": [
    "#Comparing the data shapes\n",
    "print(equity_data_oct.shape)\n",
    "print(gold_data_oct.shape)\n",
    "print(equity_data_nov.shape)\n",
    "print(gold_data_nov.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "34ff1465",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(22,)\n",
      "(22,)\n",
      "(19,)\n",
      "(19,)\n"
     ]
    }
   ],
   "source": [
    "#We can notice there's one more observation in the november equity data than in the gold ETF's\n",
    "#This extra line comes on November 28, 2019. It was a bank holiday in the US\n",
    "#Let's drop the extra line\n",
    "equity_data_nov = equity_data_nov[equity_data_nov.index !=\"2019-11-28\"]\n",
    "#Let's compare the shapes again\n",
    "print(equity_data_oct.shape)\n",
    "print(gold_data_oct.shape)\n",
    "print(equity_data_nov.shape)\n",
    "print(gold_data_nov.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "3e54bb16",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The correlation of gold and equity ETFs in October is: -0.1447074636460239\n"
     ]
    }
   ],
   "source": [
    "corr_oct = stats.pearsonr(gold_data_oct, equity_data_oct)[0]\n",
    "print(\"The correlation of gold and equity ETFs in October is: {}\".format(corr_oct))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "c2f0852d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The correlation of gold and equity ETFs in November is: -0.1447074636460239\n"
     ]
    }
   ],
   "source": [
    "corr_nov = stats.pearsonr(gold_data_nov, equity_data_nov)[0]\n",
    "print(\"The correlation of gold and equity ETFs in November is: {}\".format(corr_oct))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
